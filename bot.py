#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OSIO Focus line Telegram bot ‚Äî "DUNE: hi-tech / dry life" style
Stack: Python 3.10+, aiogram 3.x
Author: ChatGPT

What it does (prototype):
- Main menu: Presentation, Buy, Warranty Service, Contacts
- Immersive copy in DUNE-inspired tone (without shipping copyrighted frames)
- Purchase flow (collects contact & delivery info for South Africa market)
- Warranty flow implementing your exact escalation ladder
- Simple JSON "DB" for tickets/orders (prototype-friendly)
- Admin notifications (optional): ADMIN_CHAT_ID
- Ready for polling or webhook (instructions in README.md)

Replace placeholder image URLs with your licensed images before production.
"""

import asyncio
import json
import os
import re
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
)

# ==== CONFIG ====
TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "")  # optional: int/str
BASE_CURRENCY = "ZAR"  # South African Rand

# Product card (adjust freely)
PRODUCT = {
    "name": "OSIO Focus line 14",
    "tagline": "–°–¥–µ–ª–∞–Ω –≤ –†–æ—Å—Å–∏–∏. –ì–æ—Ç–æ–≤ –∫ –ø—É—Å—Ç—ã–Ω–µ. –†–æ–∂–¥—ë–Ω –¥–ª—è –¥–µ–ª–∞.",
    "price": 14999,  # ZAR ‚Äî placeholder
    "specs": [
        "14\" IPS 1920x1200, –∞–Ω—Ç–∏–±–ª–∏–∫–æ–≤—ã–π",
        "AMD Ryzen 7 / 16 –ì–ë / 1 –¢–ë NVMe",
        "Wi‚ÄëFi 6, BT 5.2, 2√óUSB‚ÄëC, HDMI, microSD",
        "–í–µ—Å 1.35 –∫–≥, –∫–æ—Ä–ø—É—Å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø—ã–ª–∏ (IP5X*)",
        "–ë–∞—Ç–∞—Ä–µ—è 70 –í—Ç¬∑—á ‚Äî –¥–æ 14 —á —Ä–∞–±–æ—Ç—ã",
    ],
    "disclaimer": "* –°—Ç–µ–ø–µ–Ω—å –ø—ã–ª–µ–∑–∞—â–∏—Ç—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –¥–ª—è –¥–µ–º–æ. –£—Ç–æ—á–Ω—è–π—Ç–µ —Ç–æ—á–Ω—ã–µ IP-–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
    "gallery": [
        # Replace these with licensed images or your own renders
        "https://images.unsplash.com/photo-1517336714731-489689fd1ca8",
        "https://images.unsplash.com/photo-1518779578993-ec3579fee39f",
        "https://images.unsplash.com/photo-1498050108023-c5249f4df085",
    ]
}

# DUNE-style flavor text
FLAVOR = {
    "hero": "–û–Ω ‚Äî –∫—É—Ä—å–µ—Ä –∑–Ω–∞–Ω–∏–π. –¢–µ–º–Ω–æ–∫–æ–∂–∏–π —é–Ω–æ—à–∞ 25 –ª–µ—Ç –≤ –±–µ–∂–µ–≤–æ–π –º–∞–Ω—Ç–∏–∏ –∏–∑ –º—É—Å–ª–∏–Ω–∞. "
             "–í –º–∏—Ä–µ, –≥–¥–µ –≤–ª–∞–≥–∞ ‚Äî —Ä–æ—Å–∫–æ—à—å, –æ–Ω –≤—ã–±–∏—Ä–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è.",
    "mood": "hi‚Äëtech / dry life: –º–∏–Ω–∏–º—É–º –ª–∏—à–Ω–µ–≥–æ, –º–∞–∫—Å–∏–º—É–º –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –∏ –ø–æ–ª—å–∑—ã."
}

DATA_DIR = os.getenv("DATA_DIR", "./data")
os.makedirs(DATA_DIR, exist_ok=True)
ORDERS_DB = os.path.join(DATA_DIR, "orders.json")
TICKETS_DB = os.path.join(DATA_DIR, "tickets.json")

def _load(path: str) -> Dict[str, Any]:
    if not os.path.exists(path):
        return {}
    with open(path, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {}

def _save(path: str, data: Dict[str, Any]) -> None:
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ==== FSMs ====
class BuyForm(StatesGroup):
    taking_name = State()
    taking_email = State()
    taking_phone = State()
    taking_city = State()
    taking_address = State()
    taking_delivery = State()
    confirm = State()

class WarrantyForm(StatesGroup):
    taking_serial = State()
    taking_issue = State()
    ask_remote = State()
    schedule_remote = State()
    tl_wait = State()
    asc_redirect = State()
    asc_control = State()
    repair = State()
    handover = State()
    feedback = State()

# ==== Bot setup ====
bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# ==== Keyboards ====
def main_menu() -> InlineKeyboardMarkup:
    btns = [
        [InlineKeyboardButton(text="üíª –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è OSIO Focus", callback_data="menu_presentation")],
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data="menu_buy")],
        [InlineKeyboardButton(text="üõ† –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å–µ—Ä–≤–∏—Å", callback_data="menu_warranty")],
        [InlineKeyboardButton(text="üì© –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="menu_contacts")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=btns)

def back_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="menu_home")]])

def delivery_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫—É—Ä—å–µ—Ä—Å–∫–∞—è (3‚Äì5 –¥–Ω–µ–π)", callback_data="del_standard")],
        [InlineKeyboardButton(text="–≠–∫—Å–ø—Ä–µ—Å—Å (1‚Äì2 –¥–Ω—è)", callback_data="del_express")],
        [InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑ –ø–∞—Ä—Ç–Ω—ë—Ä", callback_data="del_pickup")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="buy_back")]
    ])

def yesno_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–î–∞", callback_data="yes"),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no"),
    ]])

def warranty_progress_kb(ticket_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –¢–õ (3‚Äì5 —Ä–∞–±. –¥–Ω–µ–π)", callback_data=f"tl_wait:{ticket_id}")],
        [InlineKeyboardButton(text="üè• –ù–∞–ø—Ä–∞–≤–∏—Ç—å –≤ –ê–°–¶ (2‚Äì3 –¥–Ω—è)", callback_data=f"asc_redirect:{ticket_id}")],
        [InlineKeyboardButton(text="üì¶ –ö–æ–Ω—Ç—Ä–æ–ª—å –ê–°–¶ –∏ –ó–ß (3‚Äì7 –¥–Ω–µ–π)", callback_data=f"asc_control:{ticket_id}")],
        [InlineKeyboardButton(text="üõ† –†–µ–º–æ–Ω—Ç (7‚Äì30 –¥–Ω–µ–π)", callback_data=f"repair:{ticket_id}")],
        [InlineKeyboardButton(text="üì¨ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–ª–∏–µ–Ω—Ç—É (3‚Äì5 –¥–Ω–µ–π)", callback_data=f"handover:{ticket_id}")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –û–°", callback_data=f"feedback:{ticket_id}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="menu_home")]
    ])

# ==== Helpers ====
def money(amount: int) -> str:
    return f"{amount:,} {BASE_CURRENCY}".replace(",", " ")

def next_ticket_id() -> str:
    db = _load(TICKETS_DB)
    i = len(db) + 1
    return f"T{datetime.utcnow().strftime('%Y%m%d')}-{i:04d}"

def next_order_id() -> str:
    db = _load(ORDERS_DB)
    i = len(db) + 1
    return f"O{datetime.utcnow().strftime('%Y%m%d')}-{i:04d}"

# ==== Start & Menu ====
@router.message(CommandStart())
async def cmd_start(msg: Message):
    welcome = (
        f"<b>OSIO Focus line</b>\n"
        f"{FLAVOR['hero']}\n\n"
        f"–ú–∏—Ä ¬´{FLAVOR['mood']}¬ª. –¢—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —á–∞—Ç‚Äë–±–æ—Ç–µ OSIO.\n"
        f"–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ."
    )
    await msg.answer_photo(
        photo=PRODUCT["gallery"][0],
        caption=welcome,
        reply_markup=main_menu()
    )

@router.callback_query(F.data == "menu_home")
async def cb_home(cb: CallbackQuery):
    await cb.message.edit_caption(
        caption=f"<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª.",
        reply_markup=main_menu()
    )
    await cb.answer()

@router.callback_query(F.data == "menu_presentation")
async def cb_presentation(cb: CallbackQuery):
    text = (
        f"<b>{PRODUCT['name']}</b> ‚Äî {PRODUCT['tagline']}\n\n"
        f"–¶–µ–Ω–∞: <b>{money(PRODUCT['price'])}</b>\n\n"
        "–ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        + "\n".join([f"‚Ä¢ {s}" for s in PRODUCT["specs"]]) +
        f"\n\n{PRODUCT['disclaimer']}"
    )
    # carousel-ish swap to second image if exists
    media = InputMediaPhoto(media=PRODUCT["gallery"][1] if len(PRODUCT["gallery"])>1 else PRODUCT["gallery"][0], caption=text)
    try:
        await cb.message.edit_media(media=media, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data="menu_buy")],
            [InlineKeyboardButton(text="üõ† –ì–∞—Ä–∞–Ω—Ç–∏—è", callback_data="menu_warranty")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="menu_home")],
        ]))
    except Exception:
        await cb.message.answer_photo(photo=PRODUCT["gallery"][0], caption=text, reply_markup=back_menu())
    await cb.answer()

@router.callback_query(F.data == "menu_contacts")
async def cb_contacts(cb: CallbackQuery):
    text = (
        "<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã OSIO –¥–ª—è –Æ–∂–Ω–æ–π –ê—Ñ—Ä–∏–∫–∏</b>\n"
        "‚Ä¢ Email: support@osio.example (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–∞–±–æ—á–∏–π)\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +27 10 555 0123 (–ø—Ä–∏–º–µ—Ä)\n"
        "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤—É: partners@osio.example\n\n"
        "<i>–°–æ–≤–µ—Ç:</i> –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Ü—Å–µ—Ç–∏ –∏ –∞–¥—Ä–µ—Å–∞ –≤—ã–¥–∞—á–∏."
    )
    await cb.message.answer(text, reply_markup=back_menu())
    await cb.answer()

# ==== Buy flow ====
@router.callback_query(F.data == "menu_buy")
async def cb_buy(cb: CallbackQuery, state: FSMContext):
    await state.set_state(BuyForm.taking_name)
    await cb.message.answer(
        "üõí <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è (–ò–º—è –∏ –§–∞–º–∏–ª–∏—è)?"
    )
    await cb.answer()

@router.message(BuyForm.taking_name)
async def buy_name(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text.strip())
    await state.set_state(BuyForm.taking_email)
    await msg.answer("‚úâÔ∏è –í–∞—à–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ (–¥–ª—è —Å—á—ë—Ç–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è):")

@router.message(BuyForm.taking_email)
async def buy_email(msg: Message, state: FSMContext):
    email = msg.text.strip()
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await msg.answer("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(email=email)
    await state.set_state(BuyForm.taking_phone)
    await msg.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç +27‚Ä¶):")

@router.message(BuyForm.taking_phone)
async def buy_phone(msg: Message, state: FSMContext):
    await state.update_data(phone=msg.text.strip())
    await state.set_state(BuyForm.taking_city)
    await msg.answer("üèô –ì–æ—Ä–æ–¥ –≤ –Æ–ê–† (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö–µ–π–ø—Ç–∞—É–Ω/–ô–æ—Ö–∞–Ω–Ω–µ—Å–±—É—Ä–≥/–î—É—Ä–±–∞–Ω):")

@router.message(BuyForm.taking_city)
async def buy_city(msg: Message, state: FSMContext):
    await state.update_data(city=msg.text.strip())
    await state.set_state(BuyForm.taking_address)
    await msg.answer("üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∏–Ω–¥–µ–∫—Å):")

@router.message(BuyForm.taking_address)
async def buy_address(msg: Message, state: FSMContext):
    await state.update_data(address=msg.text.strip())
    await state.set_state(BuyForm.taking_delivery)
    await msg.answer("üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=delivery_kb())

@router.callback_query(BuyForm.taking_delivery, F.data.startswith("del_"))
async def buy_delivery(cb: CallbackQuery, state: FSMContext):
    options = {
        "del_standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (3‚Äì5 –¥–Ω–µ–π)",
        "del_express": "–≠–∫—Å–ø—Ä–µ—Å—Å (1‚Äì2 –¥–Ω—è)",
        "del_pickup": "–°–∞–º–æ–≤—ã–≤–æ–∑ –ø–∞—Ä—Ç–Ω—ë—Ä"
    }
    await state.update_data(delivery=options.get(cb.data, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è"))
    data = await state.get_data()
    order_id = next_order_id()
    # persist order
    db = _load(ORDERS_DB)
    db[order_id] = {
        "created_at": datetime.utcnow().isoformat(),
        "product": PRODUCT["name"],
        "price": PRODUCT["price"],
        **data
    }
    _save(ORDERS_DB, db)
    await state.clear()

    text = (
        f"‚úÖ <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω</b>\n"
        f"–ù–æ–º–µ—Ä: <code>{order_id}</code>\n"
        f"–¢–æ–≤–∞—Ä: {PRODUCT['name']}\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{money(PRODUCT['price'])}</b>\n\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {data.get('name')}\n"
        f"Email: {data.get('email')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address')}\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {data.get('delivery')}\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Å—á—ë—Ç–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
        "–ï—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ /start –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
    )
    await cb.message.answer(text, reply_markup=back_menu())
    await cb.answer("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")

    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(
                int(ADMIN_CHAT_ID),
                f"üÜï ORDER {order_id}\n{json.dumps(db[order_id], ensure_ascii=False, indent=2)}"
            )
        except Exception:
            pass

# ==== Warranty flow ====

WARRANTY_STEPS = [
    "1) –û–±—Ä–∞—â–µ–Ω–∏–µ: —Å–∞–π—Ç / email / –∑–∞—è–≤–∫–∞ —á–µ—Ä–µ–∑ –ö–¶.",
    "2) –†–µ—à–µ–Ω–∏–µ —Å–∏–ª–∞–º–∏ –¢–ü: –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–µ / —É–¥–∞–ª—ë–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ 15‚Äì30 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏).",
    "3) –≠—Å–∫–∞–ª–∞—Ü–∏—è –¢–õ: –µ—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3‚Äì5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.",
    "4) –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ê–°–¶: –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ—à–µ–Ω–∏—è. –í –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞—è—Ö ‚Äî –∑–∞–±–æ—Ä –∫—É—Ä—å–µ—Ä–æ–º (2‚Äì3 –¥–Ω—è).",
    "5) –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–±–æ—Ç—ã –ê–°–¶: –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –≤–∏–∑–∏—Ç–µ. –ü–æ–º–æ—â—å –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ –ó–ß (3‚Äì7 –¥–Ω–µ–π).",
    "6) –†–µ–º–æ–Ω—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: 7‚Äì30 –¥–Ω–µ–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏ –ê–°–¶ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.",
    "7) –ü–µ—Ä–µ–¥–∞—á–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç—É: 3‚Äì5 –¥–Ω–µ–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏.",
    "8) –ü–æ–ª—É—á–µ–Ω–∏–µ –û–° (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å).",
]

@router.callback_query(F.data == "menu_warranty")
async def cb_warranty(cb: CallbackQuery, state: FSMContext):
    await state.set_state(WarrantyForm.taking_serial)
    steps = "\n".join([f"‚Ä¢ {s}" for s in WARRANTY_STEPS])
    intro = (
        "üõ† <b>–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å–µ—Ä–≤–∏—Å OSIO</b>\n"
        "–†–∞–±–æ—Ç–∞–µ–º –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—É:\n" + steps +
        "\n\n–ù–∞—á–Ω—ë–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:"
    )
    await cb.message.answer(intro)
    await cb.answer()

@router.message(WarrantyForm.taking_serial)
async def w_serial(msg: Message, state: FSMContext):
    serial = re.sub(r"\s+", "", msg.text.upper())
    await state.update_data(serial=serial)
    await state.set_state(WarrantyForm.taking_issue)
    await msg.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ. –ú–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–ª–æ–≥–∏.")

@router.message(WarrantyForm.taking_issue)
async def w_issue(msg: Message, state: FSMContext):
    await state.update_data(issue=msg.text.strip())
    await state.set_state(WarrantyForm.ask_remote)
    await msg.answer(
        "–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –∫ —É–¥–∞–ª—ë–Ω–Ω–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –Ω–∞—à–µ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏? "
        "(—ç—Ç–æ —É—Å–∫–æ—Ä—è–µ—Ç —ç—Ç–∞–ø 2 ‚Äî 15‚Äì30 –º–∏–Ω—É—Ç)",
        reply_markup=yesno_kb()
    )

@router.callback_query(WarrantyForm.ask_remote, F.data.in_({"yes","no"}))
async def w_remote(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    ticket_id = next_ticket_id()
    db = _load(TICKETS_DB)
    db[ticket_id] = {
        "created_at": datetime.utcnow().isoformat(),
        "serial": data.get("serial"),
        "issue": data.get("issue"),
        "remote_ok": cb.data == "yes",
        "status": "remote_scheduled" if cb.data == "yes" else "tl_wait",
        "history": [
            {"ts": datetime.utcnow().isoformat(), "event": "created"},
            {"ts": datetime.utcnow().isoformat(), "event": f"remote_consent:{cb.data}"},
        ]
    }
    _save(TICKETS_DB, db)

    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(
                int(ADMIN_CHAT_ID),
                f"üÜò TICKET {ticket_id}\n{json.dumps(db[ticket_id], ensure_ascii=False, indent=2)}"
            )
        except Exception:
            pass

    if cb.data == "yes":
        await state.set_state(WarrantyForm.schedule_remote)
        await cb.message.answer(
            f"‚úÖ –¢–∏–∫–µ—Ç <code>{ticket_id}</code> —Å–æ–∑–¥–∞–Ω.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —É–¥–æ–±–Ω—ã–µ <b>–¥–∞—Ç–∞/–≤—Ä–µ–º—è (UTC+2)</b> –∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
        )
    else:
        await state.set_state(WarrantyForm.tl_wait)
        await cb.message.answer(
            f"‚úÖ –¢–∏–∫–µ—Ç <code>{ticket_id}</code> —Å–æ–∑–¥–∞–Ω.\n"
            "–ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –∑–∞–ø—Ä–æ—Å —Ç–∏–º–ª–∏–¥—É (–¢–õ). –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3‚Äì5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.",
            reply_markup=warranty_progress_kb(ticket_id)
        )
    await cb.answer()

@router.message(WarrantyForm.schedule_remote)
async def w_schedule_remote(msg: Message, state: FSMContext):
    schedule = msg.text.strip()
    await state.update_data(schedule=schedule)
    data = await state.get_data()
    # find ticket by serial+issue created last
    db = _load(TICKETS_DB)
    ticket_id = None
    for k, v in sorted(db.items(), key=lambda x: x[1]["created_at"], reverse=True):
        if v["serial"] == data["serial"] and v["issue"] == data["issue"]:
            ticket_id = k
            break
    if ticket_id:
        db[ticket_id]["history"].append({"ts": datetime.utcnow().isoformat(), "event": f"remote_scheduled:{schedule}"})
        db[ticket_id]["status"] = "remote_scheduled"
        _save(TICKETS_DB, db)

    await state.set_state(WarrantyForm.tl_wait)
    await msg.answer(
        "–ò–Ω–∂–µ–Ω–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ª–æ—Ç. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è ‚Äî —ç—Å–∫–∞–ª–∏—Ä—É–µ–º –∫ –¢–õ (3‚Äì5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π).",
        reply_markup=warranty_progress_kb(ticket_id or "unknown")
    )

# Progression callbacks
@router.callback_query(F.data.startswith(("tl_wait","asc_redirect","asc_control","repair","handover","feedback")))
async def w_progress(cb: CallbackQuery):
    action, _, ticket_id = cb.data.partition(":")
    db = _load(TICKETS_DB)
    if ticket_id not in db:
        await cb.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    mapping = {
        "tl_wait": ("–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¢–õ (3‚Äì5 —Ä–∞–±. –¥–Ω–µ–π).", "tl_wait"),
        "asc_redirect": ("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ê–°–¶. –í –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞—è—Ö ‚Äî –∑–∞–±–æ—Ä –∫—É—Ä—å–µ—Ä–æ–º (2‚Äì3 –¥–Ω—è).", "asc_redirect"),
        "asc_control": ("–ö–æ–Ω—Ç—Ä–æ–ª—å –ê–°–¶ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –ó–ß (3‚Äì7 –¥–Ω–µ–π).", "asc_control"),
        "repair": ("–†–µ–º–æ–Ω—Ç (7‚Äì30 –¥–Ω–µ–π).", "repair"),
        "handover": ("–ü–µ—Ä–µ–¥–∞—á–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç—É (3‚Äì5 –¥–Ω–µ–π).", "handover"),
        "feedback": ("–ü–æ–ª—É—á–µ–Ω–∏–µ –û–°. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!", "closed"),
    }
    text, status = mapping[action]
    db[ticket_id]["history"].append({"ts": datetime.utcnow().isoformat(), "event": action})
    db[ticket_id]["status"] = status
    _save(TICKETS_DB, db)
    await cb.message.answer(f"üîÑ –¢–∏–∫–µ—Ç <code>{ticket_id}</code>: {text}")
    await cb.answer()

# ==== Admin helpers ====
@router.message(Command("orders"))
async def admin_orders(msg: Message):
    if not ADMIN_CHAT_ID or str(msg.chat.id) != str(ADMIN_CHAT_ID):
        return
    db = _load(ORDERS_DB)
    if not db:
        await msg.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    text = "<b>–ó–∞–∫–∞–∑—ã</b>\n" + "\n".join([f"‚Ä¢ {k}: {v['product']} ‚Äî {v['price']} {BASE_CURRENCY}, {v['email']}" for k,v in db.items()])
    await msg.answer(text)

@router.message(Command("tickets"))
async def admin_tickets(msg: Message):
    if not ADMIN_CHAT_ID or str(msg.chat.id) != str(ADMIN_CHAT_ID):
        return
    db = _load(TICKETS_DB)
    if not db:
        await msg.answer("–ù–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤.")
        return
    rows = []
    for k,v in db.items():
        rows.append(f"{k}: {v['serial']} | {v['status']} | {v['issue'][:40]}")
    await msg.answer("<b>–¢–∏–∫–µ—Ç—ã</b>\n" + "\n".join(rows))

# ==== Run ====
async def main():
    if not TOKEN:
        print("ERROR: set BOT_TOKEN env var")
        return
    print("Bot starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped.")
